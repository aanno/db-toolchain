/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.0/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    // java
    `java-library`

    // Apply the application plugin to add support for building an application
    // application
}

repositories {
    flatDir {
        dirs("lib/prince-java/lib", "jing-trang/build")
    }

    mavenLocal()
    mavenCentral()

    // Use jcenter for resolving your dependenes.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}


ext {
}

/*
allprojects {
    plugins {
        java
        // `java-library`
    }
}
 */

data class Jaxb(val version: String)
val jaxb = Jaxb("2.2.11")
project.ext.set("jaxb.version", "2.2.11")
project.ext.set("jaxb", jaxb)

configurations.all {
    // https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html
    resolutionStrategy {
        preferProjectModules()

        // add dependency substitution rules
        dependencySubstitution {
            // substitute(module("com.thaiopensource:jing")).with(module(":jing"))
            // substitute(module("com.thaiopensource:jing")).with(project(":jing"))
            // substitute(module("org.gradle:api")).with(project(":api"))
            // substitute project(':util') with module('org.gradle:util:3.0')
        }
        // cache dynamic versions for 10 minutes
        cacheDynamicVersionsFor(10*60, "seconds")
        // don't cache changing modules at all
        cacheChangingModulesFor(10*60, "seconds")
    }
    resolutionStrategy.setForcedModules(
            "net.sf.saxon:Saxon-HE:9.8.0-14"
    )
    exclude("xml-apis", "xml-apis")
    exclude("xml-apis", "xml-apis-ext")
    // exclude super jars
    exclude("org.apache.xmlgraphics", "batik-all")
}

dependencies {
    // taken from prince-java download at 'lib/prince-java/lib'
    api("", "prince", "")
    // This dependency is found on compile classpath of this component and consumers.
    api("com.google.guava:guava:26.0-jre")
    api("org.docbook", "docbook-xslt2", "2.3.8") {
        exclude("org.xmlresolver", "xmlresolver")
        exclude("org.apache.xmlgraphics", "fop")
        exclude("org.apache.xmlgraphics", "batik-all")
        exclude("org.apache.xmlgraphics", "batik-xml")
        exclude("net.sf.saxon", "saxon")
        exclude("net.sf.saxon", "Saxon-HE")
        exclude("com.thaiopensource", "jing")
    }
    // build from submodule 'jing-trang'
    api("", "jing", "")
    api("net.sf.saxon", "Saxon-HE", "9.8.0-14")
    api("org.apache.xmlgraphics", "fop-pdf-images", "2.3") {
        exclude("xml-apis", "xml-apis")
        exclude("xml-apis", "xml-apis-ext")
    }
    api("org.apache.xmlgraphics", "fop", "2.3") {
        exclude("xml-apis", "xml-apis")
        exclude("xml-apis", "xml-apis-ext")
    }
    // pull in all deps (but batik-all will be excuded)
    api("org.apache.xmlgraphics", "batik-all", "1.10")
    api("com.helger", "ph-schematron", "5.0.8") {
        exclude("com.helger", "ph-jaxb")
        exclude("com.helger", "ph-jaxb-pom")
        exclude("org.glassfish.jaxb", "jaxb-bom")
    }
    api("org.xmlresolver", "xmlresolver", "0.14.0")
    api("org.asciidoctor", "asciidoctorj", "1.6.0-RC.2")
    api("net.sf.xslthl", "xslthl", "2.1.3")

    // Use TestNG framework, also requires calling test.useTestNG() below
    testImplementation("org.testng:testng:6.14.3")
}

/*
sourceSets {
    main {
        java {
            srcDirs 'src'
            srcDirs 'src1'
            srcDirs 'src2'
        }
    }
}
 */

/*
application {
    // Define the main class for the application
    mainClassName = "com.github.aanno.dbtoolchain.App"
}
 */

val test by tasks.getting(Test::class) {
    // Use TestNG for unit tests
    useTestNG()
}

tasks {

    withType<JavaCompile> {

        options.compilerArgs.addAll(listOf(
                "--release", "11",
                "--module-path", classpath.asPath
        ))

        /*
        compileOptions {
            sourceCompatibility = 11
            targetCompatibility = 11
        }
         */
    }

    withType<Jar> {

        manifest {
            attributes(
                    mapOf(
                            "Main-Class" to "com.github.aanno.dbtoolchain.App"
                    // "Main-Class" to application.mainClassName
                    // "Class-Path" to configurations.compile.collect { it.getName() }.join(' ')
                    )
            )
        }
        val version = "1.0-SNAPSHOT"

        // archiveName = "${application.applicationName}-$version.jar"
        // from(configurations.compile.getAsMap().map { if (it.isDirectory) it else zipTree(it) })
    }

}
